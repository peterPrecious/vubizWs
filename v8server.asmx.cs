using hiveCat.appBuilder.CsvWriter;
using hiveCat.appBuilder.ExcelWriter;

using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Web.Services;

//using System.Security.Cryptography;
//using hiveCat.appBuilder.Cryptographics;

namespace vubizWS
{
  [WebService(Namespace = "http://vubiz.com/")]
  [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
  [System.ComponentModel.ToolboxItem(false)]
  [System.Web.Script.Services.ScriptService]

  public class v8server : WebService
  { // these server side web services are called by Default.aspx

    [WebMethod]
    public string autoEnroll(
      string custGuid,
      string membId,
      string membFirstName,
      string membLastName,
      string membEmail,
      string membMemo)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8autoEnroll";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custGuid", custGuid));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      cmd.Parameters.Add(new SqlParameter("@membFirstName", membFirstName));
      cmd.Parameters.Add(new SqlParameter("@membLastName", membLastName));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membMemo", membMemo));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string autoEnrollWs(
      string custGuid,
      string membId,
      string membFirstName,
      string membLastName,
      string membEmail,
      string membMemo,
      string membPrograms,
      bool membActive)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8autoEnrollWs";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custGuid", custGuid));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      cmd.Parameters.Add(new SqlParameter("@membFirstName", membFirstName));
      cmd.Parameters.Add(new SqlParameter("@membLastName", membLastName));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membMemo", membMemo));
      cmd.Parameters.Add(new SqlParameter("@membPrograms", membPrograms));
      cmd.Parameters.Add(new SqlParameter("@membActive", membActive));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string autoSignIn(string custAcctId, string membId, string membPassword)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8autoSignIn";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custAcctId", custAcctId));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      cmd.Parameters.Add(new SqlParameter("@membPassword", membPassword));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod(Description =
      "This enrolls a vuEcommerce customer into V8." +
      "<h4>Parameters</h4>" +
      "<ol>" +
      "<li>token: assigned by Login/Register/Take Course with a life of 10 mins to protect learner access;</li>" +
      "<li>logGuid: generated by the ecommerce web service, returned to NOP which passes it to vuEcommerce.asp;</li>" +
      "</ol>"
    )]
    public string vuEcommerce(string token, string logGuid)
    {
      using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString))
      {
        con.Open();
        using (SqlCommand cmd = new SqlCommand())
        {
          cmd.Connection = con;
          cmd.CommandText = "dbo.sp8vuEcommerce";
          cmd.CommandType = CommandType.StoredProcedure;
          cmd.Parameters.Add(new SqlParameter("@token", token));
          cmd.Parameters.Add(new SqlParameter("@logGuid", logGuid));

          cmd.Parameters.Add("@status", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
          cmd.Parameters.Add("@profile", SqlDbType.VarChar, 50).Direction = ParameterDirection.Output;
          cmd.Parameters.Add("@membGuid", SqlDbType.VarChar, 36).Direction = ParameterDirection.Output;
          cmd.Parameters.Add("@custId", SqlDbType.VarChar, 8).Direction = ParameterDirection.Output;

          cmd.ExecuteNonQuery();

          string status = cmd.Parameters["@status"].Value.ToString();
          string profile = cmd.Parameters["@profile"].Value.ToString();
          string membGuid = cmd.Parameters["@membGuid"].Value.ToString();
          string custId = cmd.Parameters["@custId"].Value.ToString();
          string result = status + "~" + profile + "~" + membGuid + "~" + custId;

          return (result);
        }
      }
    }

    [WebMethod]
    public string ssoMembGuid(string membGuid)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8ssoMembGuid";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@membGuid", membGuid));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string ssoMembId(string custId, string membId)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8ssoMembId";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string ssoMembNo(string membNo)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8ssoMembNo";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@membNo", membNo));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string ssoMembId2(string custGuid, string membId)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8ssoMembId2";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custGuid", custGuid));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string custTitle(string custId)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8custTitle";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod(Description =
      "This enrolls an MPC who has a valid ecommerce record on file." +
      "<h4>Parameters</h4>" +
      "<ol>" +
      "<li>custGuid: this is assigned by Vubiz and represents the customer account;</li>" +
      "<li>membId: This is the learner Id;</li>" +
      "</ol>")]
    public string caamEnroll(string custGuid, string membId)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8caamEnroll";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custGuid", custGuid));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string cfibAuthenticate(string profile, string membEmailEncrypted, string membPasswordEncrypted)
    {

      // comment out below when testing without encryption
      //string encryptKey = "ADE2B52CB87997D6FFA8434D96DA917D";      // this is the private encryption key shared with CFIB
      //Cryptographic cryptographic = new Cryptographic();
      //string membEmail = cryptographic.decryptString(membEmailEncrypted, encryptKey, null);
      //string membPassword = cryptographic.decryptString(membPasswordEncrypted, encryptKey, null);

      // comment out below when live
      string membEmail = membEmailEncrypted;
      string membPassword = membPasswordEncrypted;


      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8cfibAuthenticate";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@profile", profile));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membPassword", membPassword));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string cfibSignIn(string profile, string membEmail, string membPassword)
    {
      // used to temporarily access V8 when CFIB site was down - no encryption (/vubizApps/credentials.aspx)

      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8cfibAuthenticate";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@profile", profile));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membPassword", membPassword));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }


    [WebMethod]
    public string cfibEnroll(string custId, string membEmail, string membPassword, string membFirstName, string membLastName, string membOrganization, string membType, string membMemo)

    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8cfibEnroll";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membPassword", membPassword));
      cmd.Parameters.Add(new SqlParameter("@membFirstName", membFirstName));
      cmd.Parameters.Add(new SqlParameter("@membLastName", membLastName));
      cmd.Parameters.Add(new SqlParameter("@membOrganization", membOrganization));
      cmd.Parameters.Add(new SqlParameter("@membType", membType));
      cmd.Parameters.Add(new SqlParameter("@membMemo", membMemo));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string cfibIsMember(string custId, string membOrganization, string membEmail)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8cfibIsMember";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@membOrganization", membOrganization));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string enroll(string custId, string membEmail, string membPassword, string membFirstName, string membLastName, string membOrganization)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8enroll";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membPassword", membPassword));
      cmd.Parameters.Add(new SqlParameter("@membFirstName", membFirstName));
      cmd.Parameters.Add(new SqlParameter("@membLastName", membLastName));
      cmd.Parameters.Add(new SqlParameter("@membOrganization", membOrganization));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public
      string ibaoAutoEnroll(
      string custGuid,
      string membId,
      string membFirstName,
      string membLastName,
      string membEmail,
      string membType,
      string membOrganization,

      string membCountryID,
      string membProvinceStateID,
      string membCity,
      string membAddress1,
      string membAddress2,
      string membPostalZip,
      string membPhone
      )
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8ibaoAutoEnroll";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custGuid", custGuid));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      cmd.Parameters.Add(new SqlParameter("@membFirstName", membFirstName));
      cmd.Parameters.Add(new SqlParameter("@membLastName", membLastName));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membType", membType));
      cmd.Parameters.Add(new SqlParameter("@membOrganization", membOrganization));

      cmd.Parameters.Add(new SqlParameter("@membCountryID", membCountryID));
      cmd.Parameters.Add(new SqlParameter("@membProvinceStateID", membProvinceStateID));
      cmd.Parameters.Add(new SqlParameter("@membCity", membCity));
      cmd.Parameters.Add(new SqlParameter("@membAddress1", membAddress1));
      cmd.Parameters.Add(new SqlParameter("@membAddress2", membAddress2));
      cmd.Parameters.Add(new SqlParameter("@membPostalZip", membPostalZip));
      cmd.Parameters.Add(new SqlParameter("@membPhone", membPhone));

      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string ibaoEnroll(
      string custGuid,
      string membId,
      string membFirstName,
      string membLastName,
      string membEmail,
      string membType
      )
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8ibaoEnroll";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custGuid", custGuid));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      cmd.Parameters.Add(new SqlParameter("@membFirstName", membFirstName));
      cmd.Parameters.Add(new SqlParameter("@membLastName", membLastName));
      cmd.Parameters.Add(new SqlParameter("@membEmail", membEmail));
      cmd.Parameters.Add(new SqlParameter("@membType", membType));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string ibaoIsMember(string custId, string membId)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8ibaoIsMember";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string isMember(string custId, string membId)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp5isMember";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, false);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string profiles(string alias)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8profiles";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@alias", alias));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows)
      {
        result = convertToJSON(drd, true);
      }
      con.Close();
      return (result);
    }

    [WebMethod]
    public string translate(string phrase, string lang)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8translate";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@phrase", phrase));
      cmd.Parameters.Add(new SqlParameter("@lang", lang));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows) result = convertToJSON(drd, true);
      con.Close();
      return (result);
    }

    [WebMethod]
    public string translateUpdate(string phraseIn, string lang, string phraseEx)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.sp8translateUpdate";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@phraseIn", phraseIn));
      cmd.Parameters.Add(new SqlParameter("@lang", lang));
      cmd.Parameters.Add(new SqlParameter("@PhraseEx", phraseEx));
      SqlDataReader drd = cmd.ExecuteReader();
      string result = "null";
      if (drd.HasRows) result = convertToJSON(drd, false);
      con.Close();
      return (result);
    }



    private static string decryptString_temp(string clearText)  // this decrypts a text string (dummy for testing)
    {
      return clearText;
    }

    private string convertToJSON(SqlDataReader reader, bool isArray)  // this is a general routine used in v8client.asmx.cs and v8server.asmx.cs
    {
      // this is a general routine used in v8client.asmx.cs and v8clientserver.asmx.cs to render properly formatted JSON
      // the isArray, when true will add [] around the objects, else it will not

      if (reader == null || reader.FieldCount == 0)
      {
        return "null";
      }
      int rowCount = 0;
      StringBuilder sb = new StringBuilder();
      if (isArray) { sb.Append("["); };
      while (reader.Read())
      {
        sb.Append("{");
        for (int i = 0; i < reader.FieldCount; i++)
        {
          sb.Append("\"" + reader.GetName(i) + "\":");
          sb.Append("\"" + reader[i] + "\"");
          sb.Append(i == reader.FieldCount - 1 ? "" : ",");
        }
        sb.Append("},");
        rowCount++;
      }
      if (rowCount > 0)
      {
        int index = sb.ToString().LastIndexOf(",");
        sb.Remove(index, 1);
        if (isArray) { sb.Append("]"); };
      }
      return sb.ToString();
    }



    // these are for excel reports - they do not return JSON but just # rows plus create the spreadsheet for download
    // when starting with sX they are called server side and return an int value of rows (return rowCount)
    // when starting with cX they are called client side and return an text value of rows (response.write)

    [WebMethod]
    public int ecommerceReport(string cust, string strDate, string endDate, string membNo, string lang, string fileName)
    {
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8client"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@cust", cust));
      cmd.Parameters.Add(new SqlParameter("@strDate", strDate));
      cmd.Parameters.Add(new SqlParameter("@endDate", endDate));

      // count all records
      cmd.CommandText = "dbo.spXecommerceCount";
      Int32 rowCount = (Int32)cmd.ExecuteScalar();

      // get all records
      cmd.CommandText = "dbo.spXecommerceReport";
      SqlDataReader drd = cmd.ExecuteReader();

      // generate an excel or csv file
      if (rowCount <= 5000)
      {
        // pass the drd to the excel writer (in hiveCat.appBuilder) and return count in JSON
        ExcelReport report = null;
        report = new ExcelReport(membNo, lang, fileName);
        rowCount = report.ecommerceReport(drd);
      }
      else
      {
        CsvReport csvReport = new CsvReport();
        rowCount = csvReport.generate(membNo, lang, fileName, drd);
      }
      con.Close();
      drd.Close();
      return rowCount;
    }

    [WebMethod]
    public int isGovActivityReport(string organizations, string strDate, string endDate, string membNo, string lang, string fileName)
    { // get all learner activity for CCOHS within selected organizations
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@organizations", organizations));
      cmd.Parameters.Add(new SqlParameter("@strDate", strDate));
      cmd.Parameters.Add(new SqlParameter("@endDate", endDate));

      // count all records
      cmd.CommandText = "dbo.spXisGovActivityCount";
      Int32 rowCount = (Int32)cmd.ExecuteScalar();

      // get all records
      cmd.CommandText = "dbo.spXisGovActivityReport";
      SqlDataReader drd = cmd.ExecuteReader();

      // generate an excel or csv file
      if (rowCount <= 5000)
      {
        // pass the drd to the excel writer and return count in JSON
        ExcelReport report = null;
        report = new ExcelReport(membNo, lang, fileName);
        rowCount = report.isGovActivityReport(drd);
      }
      else
      {
        CsvReport csvReport = new CsvReport();
        rowCount = csvReport.generate(membNo, lang, fileName, drd);
      }
      con.Close();
      drd.Close();
      return rowCount;
    }

    [WebMethod]
    public int isGovActivity(string organizations, string strDate, string endDate, int repType, string membNo, string lang, string fileName)
    { // get all learner activity for CCOHS within selected organizations
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.spXisGovActivity";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@organizations", organizations));
      cmd.Parameters.Add(new SqlParameter("@strDate", strDate));
      cmd.Parameters.Add(new SqlParameter("@endDate", endDate));
      cmd.Parameters.Add(new SqlParameter("@repType", repType));

      Int32 rowCount = 0;
      using (SqlDataReader drd = cmd.ExecuteReader())
      // count all records
      {
        while (drd.Read())
        {
          rowCount = drd.GetInt32(0);
        }

        // get all records
        if (drd.NextResult())
        {
          while (drd.Read())
          {
            // generate an excel or csv file
            if (rowCount <= 5000)
            {
              // pass the drd to the excel writer and return count in JSON
              ExcelReport report = null;
              report = new ExcelReport(membNo, lang, fileName);
              rowCount = report.isGovActivityReport(drd);
            }
            else
            {
              CsvReport csvReport = new CsvReport();
              rowCount = csvReport.generate(membNo, lang, fileName, drd);
            }
          }
        }

      }

      con.Close();
      return rowCount;
    }

    [WebMethod]
    public int learnerReport(string custId, string membNo, string lang, string fileName)
    { // get all learners for this account : custId
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.spXlearnerReport";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      SqlDataReader drd = cmd.ExecuteReader();

      // pass the drd to the excel writer and return count in JSON
      ExcelReport report = null;
      report = new ExcelReport(membNo, lang, fileName);
      int rowCount = report.learnerReport(drd);
      con.Close();
      return rowCount;
    }

    [WebMethod]
    public int learnerReport2(string custId, string membNo, string lang, string fileName)
    { // get all learners for this account : custId
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.spXlearnerReport2";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      SqlDataReader drd = cmd.ExecuteReader();

      // pass the drd to the excel writer and return count in JSON
      ExcelReport report = null;
      report = new ExcelReport(membNo, lang, fileName);
      int rowCount = report.learnerReport2(drd);
      con.Close();
      return rowCount;
    }

    [WebMethod]
    public int learnerReport2a(string custId, int guests, string membNo, string lang, string fileName)
    { // get all learners for this account : custId (like learnerReport but includes Organization)
      using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString))
      {
        con.Open();
        using (SqlCommand cmd = new SqlCommand
        {
          Connection = con,
          CommandText = "dbo.spXlearnerReport2a",
          CommandType = CommandType.StoredProcedure
        })
        {
          cmd.Parameters.Add(new SqlParameter("@custId", custId));
          cmd.Parameters.Add(new SqlParameter("@guests", guests));
          SqlDataReader drd = cmd.ExecuteReader();

          // pass the drd to the excel writer and return count in JSON
          //          ExcelReport report = null;
          ExcelReport report = new ExcelReport(membNo, lang, fileName);
          int rowCount = report.learnerReport2a(drd);
          con.Close();
          return rowCount;
        }
      }
    }

    [WebMethod]
    public int learnerActivityReport(string custId, int completed, int guests, string strDate, string endDate, string membNo, string lang, string fileName, int type)
    { // get all learner activity for custId, either "program starts" (completed:0) or "program completion" (completed:1)
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8server"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandText = "dbo.spXlearnerActivityReport";
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@completed", completed));
      cmd.Parameters.Add(new SqlParameter("@guests", guests));
      cmd.Parameters.Add(new SqlParameter("@strDate", strDate));
      cmd.Parameters.Add(new SqlParameter("@endDate", endDate));
      SqlDataReader drd = cmd.ExecuteReader();

      //this will count rows but leave at end of table - just for debugging

      //DataTable dt = new DataTable();
      //dt.Load(drd);
      //int numRows = dt.Rows.Count;


      // pass the drd to the excel writer and return count in JSON
      ExcelReport report = null;
      report = new ExcelReport(membNo, lang, fileName);
      int rowCount = report.learnerActivityReport(drd, type);
      con.Close();
      return rowCount;
    }

    [WebMethod]
    public int programActivityDetailsReport(string custId, string strDate, string endDate, string membId, string membNo, string lang, string fileName)
    { // get all learner activity for custId between dates 
      SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["v8client"].ConnectionString);
      con.Open();
      SqlCommand cmd = new SqlCommand();
      cmd.Connection = con;
      cmd.CommandType = CommandType.StoredProcedure;
      cmd.Parameters.Add(new SqlParameter("@custId", custId));
      cmd.Parameters.Add(new SqlParameter("@strDate", strDate));
      cmd.Parameters.Add(new SqlParameter("@endDate", endDate));
      cmd.Parameters.Add(new SqlParameter("@membId", membId));

      // count all ecommerce records for this channel (cust) between these dates
      cmd.CommandText = "dbo.spXprogramActivityDetailsCount";
      Int32 rowCount = (Int32)cmd.ExecuteScalar();

      // get all ecommerce records for this channel (cust) between these dates
      cmd.CommandText = "dbo.spXprogramActivityDetailsReport";
      SqlDataReader drd = cmd.ExecuteReader();

      // generate an excel or csv file
      if (rowCount <= 5000)
      {
        // pass the drd to the excel writer and return count in JSON
        ExcelReport report = null;
        report = new ExcelReport(membNo, lang, fileName);
        rowCount = report.programActivityDetailsReport(drd);
      }
      else
      {
        CsvReport csvReport = new CsvReport();
        rowCount = csvReport.generate(membNo, lang, fileName, drd);
      }
      con.Close();
      drd.Close();
      return rowCount;
    }

    [WebMethod]
    public int guestCompletionReport(string membNo, string lang, string fileName)
    {
      using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["apps"].ConnectionString))
      {
        con.Open();
        SqlCommand cmd = new SqlCommand
        {
          Connection = con,
          CommandText = "dbo.spXguestCompletion",
          CommandType = CommandType.StoredProcedure
        };
        cmd.Parameters.Add(new SqlParameter("@membNo", membNo));
        SqlDataReader drd = cmd.ExecuteReader();

        // pass the drd to the excel writer and return count in JSON
        ExcelReport report = new ExcelReport(membNo, lang, fileName);
        int rowCount = report.guestCompletionReport(drd);
        con.Close();
        return rowCount;
      }
    }


  }

  // temp copy of hiveCat.appBuilder/cryptography.cs - which couldn't access for some reason

  //public class shite 
  //{

  //  public static string encryptString(string clearText, string strHexKey, string strIv)
  //  {
  //    // rewrite into a byte table
  //    byte[] plainText = Encoding.UTF8.GetBytes(clearText);

  //    // 128 hex key
  //    byte[] key = stringToBytes(strHexKey);

  //    // set IV null if needed
  //    byte[] iv = null;
  //    if (strIv != null) iv = Encoding.UTF8.GetBytes(strIv);

  //    // prepare "the crypter"
  //    RijndaelManaged rijndael = new RijndaelManaged
  //    {
  //      Mode = CipherMode.ECB,
  //      Padding = PaddingMode.PKCS7
  //    };
  //    ICryptoTransform aesEncryptor = rijndael.CreateEncryptor(key, null);

  //    // Write data into the MemoryStream
  //    MemoryStream ms = new MemoryStream();
  //    CryptoStream cs = new CryptoStream(ms, aesEncryptor, CryptoStreamMode.Write);
  //    cs.Write(plainText, 0, plainText.Length);
  //    cs.FlushFinalBlock();

  //    // write crypted data into a byte table
  //    byte[] CipherBytes = ms.ToArray();

  //    ms.Close();
  //    cs.Close();

  //    // byte table into string Base16 HEX
  //    return bytesToString(CipherBytes); //  Convert.ToBase64String(CipherBytes);
  //  }

  //  public static string decryptString(string strCiphered, string strHexKey, string strIv)
  //  {
  //    // rewrite into a byte table
  //    byte[] cipheredData = stringToBytes(strCiphered);
  //    //128 HEx key
  //    byte[] key = stringToBytes(strHexKey);

  //    // set IV null if needed
  //    byte[] iv = null;
  //    if (strIv != null)
  //    {
  //      iv = Encoding.UTF8.GetBytes(strIv);
  //    }

  //    // prepare "the decrypter"
  //    RijndaelManaged rijndael = new RijndaelManaged
  //    {
  //      Mode = CipherMode.ECB,
  //      Padding = PaddingMode.PKCS7
  //    };

  //    // write data into the MemoryStream
  //    ICryptoTransform decryptor = rijndael.CreateDecryptor(key, iv);
  //    MemoryStream ms = new MemoryStream(cipheredData);
  //    CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);

  //    // byte table into string Base64
  //    byte[] plainTextData = new byte[cipheredData.Length];
  //    int decryptedByteCount = cs.Read(plainTextData, 0, plainTextData.Length);

  //    ms.Close();
  //    cs.Close();
  //    return Encoding.UTF8.GetString(plainTextData, 0, decryptedByteCount);
  //  }

  //  public static string bytesToString(byte[] bytes_Input) //get string hex from byte[]
  //  {
  //    StringBuilder strTemp = new StringBuilder(bytes_Input.Length * 2);
  //    foreach (byte b in bytes_Input)
  //    {
  //      strTemp.Append(b.ToString("X02"));
  //    }
  //    return strTemp.ToString();
  //  }

  //  public static byte[] stringToBytes(string strInput) // get byte[] from hex
  //  {
  //    int i = 0;
  //    int x = 0;
  //    // allocate byte array based on half of string length
  //    byte[] bytes = new byte[(strInput.Length) / 2];
  //    // loop through the string - 2 bytes at a time converting
  //    //  it to decimal equivalent and store in byte array
  //    while (strInput.Length > i + 1)
  //    {
  //      long lngDecimal = Convert.ToInt32(strInput.Substring(i, 2), 16);
  //      bytes[x] = Convert.ToByte(lngDecimal);
  //      i += 2;
  //      ++x;
  //    }
  //    // return the finished byte array of decimal values
  //    return bytes;
  //  }

  //}


}